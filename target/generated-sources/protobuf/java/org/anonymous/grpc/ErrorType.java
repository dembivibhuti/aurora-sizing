// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error_type.proto

package org.anonymous.grpc;

/**
 * Protobuf enum {@code org.anonymous.grpc.ErrorType}
 */
public enum ErrorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ERR_INVALID_ARGUMENTS = 0;</code>
   */
  ERR_INVALID_ARGUMENTS(0),
  /**
   * <code>SDB_ERR_CONNECTION_LIMIT = 1;</code>
   */
  SDB_ERR_CONNECTION_LIMIT(1),
  /**
   * <code>SDB_ERR_AUTH_FAIL_NO_CREDENTIAL = 2;</code>
   */
  SDB_ERR_AUTH_FAIL_NO_CREDENTIAL(2),
  /**
   * <code>SDB_ERR_AUTH_FAIL_INVALID_CREDENTIAL = 3;</code>
   */
  SDB_ERR_AUTH_FAIL_INVALID_CREDENTIAL(3),
  /**
   * <code>SDB_ERR_PERMISSION_DENIED = 4;</code>
   */
  SDB_ERR_PERMISSION_DENIED(4),
  /**
   * <code>SDB_ERR_UNSUPPORTED_VERSION = 5;</code>
   */
  SDB_ERR_UNSUPPORTED_VERSION(5),
  /**
   * <code>SDB_ERR_INDEX_NOT_FOUND = 6;</code>
   */
  SDB_ERR_INDEX_NOT_FOUND(6),
  /**
   * <code>SDB_ERR_OBJECT_ALREADY_EXISTS = 7;</code>
   */
  SDB_ERR_OBJECT_ALREADY_EXISTS(7),
  /**
   * <code>ERR_UNSUPPORTED_OPERATION = 8;</code>
   */
  ERR_UNSUPPORTED_OPERATION(8),
  /**
   * <code>SDB_ERR_OBJECT_NOT_FOUND = 9;</code>
   */
  SDB_ERR_OBJECT_NOT_FOUND(9),
  /**
   * <code>SDB_ERR_OBJECT_INVALID = 10;</code>
   */
  SDB_ERR_OBJECT_INVALID(10),
  /**
   * <code>ERR_OBJECT_NOT_FOUND = 11;</code>
   */
  ERR_OBJECT_NOT_FOUND(11),
  /**
   * <code>ERR_PERMISSION_DENIED = 12;</code>
   */
  ERR_PERMISSION_DENIED(12),
  /**
   * <code>ERR_NOT_CONSISTENT = 13;</code>
   */
  ERR_NOT_CONSISTENT(13),
  /**
   * <code>ERR_OVERFLOW = 14;</code>
   */
  ERR_OVERFLOW(14),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>ERR_INVALID_ARGUMENTS = 0;</code>
   */
  public static final int ERR_INVALID_ARGUMENTS_VALUE = 0;
  /**
   * <code>SDB_ERR_CONNECTION_LIMIT = 1;</code>
   */
  public static final int SDB_ERR_CONNECTION_LIMIT_VALUE = 1;
  /**
   * <code>SDB_ERR_AUTH_FAIL_NO_CREDENTIAL = 2;</code>
   */
  public static final int SDB_ERR_AUTH_FAIL_NO_CREDENTIAL_VALUE = 2;
  /**
   * <code>SDB_ERR_AUTH_FAIL_INVALID_CREDENTIAL = 3;</code>
   */
  public static final int SDB_ERR_AUTH_FAIL_INVALID_CREDENTIAL_VALUE = 3;
  /**
   * <code>SDB_ERR_PERMISSION_DENIED = 4;</code>
   */
  public static final int SDB_ERR_PERMISSION_DENIED_VALUE = 4;
  /**
   * <code>SDB_ERR_UNSUPPORTED_VERSION = 5;</code>
   */
  public static final int SDB_ERR_UNSUPPORTED_VERSION_VALUE = 5;
  /**
   * <code>SDB_ERR_INDEX_NOT_FOUND = 6;</code>
   */
  public static final int SDB_ERR_INDEX_NOT_FOUND_VALUE = 6;
  /**
   * <code>SDB_ERR_OBJECT_ALREADY_EXISTS = 7;</code>
   */
  public static final int SDB_ERR_OBJECT_ALREADY_EXISTS_VALUE = 7;
  /**
   * <code>ERR_UNSUPPORTED_OPERATION = 8;</code>
   */
  public static final int ERR_UNSUPPORTED_OPERATION_VALUE = 8;
  /**
   * <code>SDB_ERR_OBJECT_NOT_FOUND = 9;</code>
   */
  public static final int SDB_ERR_OBJECT_NOT_FOUND_VALUE = 9;
  /**
   * <code>SDB_ERR_OBJECT_INVALID = 10;</code>
   */
  public static final int SDB_ERR_OBJECT_INVALID_VALUE = 10;
  /**
   * <code>ERR_OBJECT_NOT_FOUND = 11;</code>
   */
  public static final int ERR_OBJECT_NOT_FOUND_VALUE = 11;
  /**
   * <code>ERR_PERMISSION_DENIED = 12;</code>
   */
  public static final int ERR_PERMISSION_DENIED_VALUE = 12;
  /**
   * <code>ERR_NOT_CONSISTENT = 13;</code>
   */
  public static final int ERR_NOT_CONSISTENT_VALUE = 13;
  /**
   * <code>ERR_OVERFLOW = 14;</code>
   */
  public static final int ERR_OVERFLOW_VALUE = 14;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ErrorType valueOf(int value) {
    return forNumber(value);
  }

  public static ErrorType forNumber(int value) {
    switch (value) {
      case 0: return ERR_INVALID_ARGUMENTS;
      case 1: return SDB_ERR_CONNECTION_LIMIT;
      case 2: return SDB_ERR_AUTH_FAIL_NO_CREDENTIAL;
      case 3: return SDB_ERR_AUTH_FAIL_INVALID_CREDENTIAL;
      case 4: return SDB_ERR_PERMISSION_DENIED;
      case 5: return SDB_ERR_UNSUPPORTED_VERSION;
      case 6: return SDB_ERR_INDEX_NOT_FOUND;
      case 7: return SDB_ERR_OBJECT_ALREADY_EXISTS;
      case 8: return ERR_UNSUPPORTED_OPERATION;
      case 9: return SDB_ERR_OBJECT_NOT_FOUND;
      case 10: return SDB_ERR_OBJECT_INVALID;
      case 11: return ERR_OBJECT_NOT_FOUND;
      case 12: return ERR_PERMISSION_DENIED;
      case 13: return ERR_NOT_CONSISTENT;
      case 14: return ERR_OVERFLOW;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ErrorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ErrorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ErrorType>() {
          public ErrorType findValueByNumber(int number) {
            return ErrorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.anonymous.grpc.ErrorTypeOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final ErrorType[] VALUES = values();

  public static ErrorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ErrorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:org.anonymous.grpc.ErrorType)
}

