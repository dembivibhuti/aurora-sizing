// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package baseproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	Transaction(ctx context.Context, opts ...grpc.CallOption) (TransactionService_TransactionClient, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) Transaction(ctx context.Context, opts ...grpc.CallOption) (TransactionService_TransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionService_serviceDesc.Streams[0], "/org.anonymous.grpc.TransactionService/transaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceTransactionClient{stream}
	return x, nil
}

type TransactionService_TransactionClient interface {
	Send(*CmdTransactionRequest) error
	CloseAndRecv() (*TransMsgResponse, error)
	grpc.ClientStream
}

type transactionServiceTransactionClient struct {
	grpc.ClientStream
}

func (x *transactionServiceTransactionClient) Send(m *CmdTransactionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionServiceTransactionClient) CloseAndRecv() (*TransMsgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility
type TransactionServiceServer interface {
	Transaction(TransactionService_TransactionServer) error
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (UnimplementedTransactionServiceServer) Transaction(TransactionService_TransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_Transaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionServiceServer).Transaction(&transactionServiceTransactionServer{stream})
}

type TransactionService_TransactionServer interface {
	SendAndClose(*TransMsgResponse) error
	Recv() (*CmdTransactionRequest, error)
	grpc.ServerStream
}

type transactionServiceTransactionServer struct {
	grpc.ServerStream
}

func (x *transactionServiceTransactionServer) SendAndClose(m *TransMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionServiceTransactionServer) Recv() (*CmdTransactionRequest, error) {
	m := new(CmdTransactionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.anonymous.grpc.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "transaction",
			Handler:       _TransactionService_Transaction_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "transaction_svc.proto",
}
