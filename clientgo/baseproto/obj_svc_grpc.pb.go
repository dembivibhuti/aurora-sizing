// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package baseproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ObjServiceClient is the client API for ObjService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjServiceClient interface {
	Connect(ctx context.Context, in *CmdConnect, opts ...grpc.CallOption) (*CmdConnectResponse, error)
	ConnectExt(ctx context.Context, in *CmdConnectExt, opts ...grpc.CallOption) (*CmdConnectExtResponse, error)
	LookupByName(ctx context.Context, in *CmdLookupByName, opts ...grpc.CallOption) (*CmdLookupByNameResponse, error)
	LookupByNameStream(ctx context.Context, in *CmdLookupByName, opts ...grpc.CallOption) (ObjService_LookupByNameStreamClient, error)
	LookupByType(ctx context.Context, in *CmdNameLookupByType, opts ...grpc.CallOption) (*CmdNameLookupByTypeResponse, error)
	LookupByTypeStream(ctx context.Context, in *CmdNameLookupByType, opts ...grpc.CallOption) (ObjService_LookupByTypeStreamClient, error)
	GetObject(ctx context.Context, in *CmdGetByName, opts ...grpc.CallOption) (*CmdGetByNameResponse, error)
	GetObjectExt(ctx context.Context, in *CmdGetByNameExt, opts ...grpc.CallOption) (*CmdGetByNameExtResponse, error)
	GetObjectManyByName(ctx context.Context, in *CmdGetManyByName, opts ...grpc.CallOption) (*CmdGetManyByNameResponse, error)
	GetObjectManyByNameStream(ctx context.Context, in *CmdGetManyByName, opts ...grpc.CallOption) (ObjService_GetObjectManyByNameStreamClient, error)
	GetObjectManyByNameExt(ctx context.Context, in *CmdGetManyByNameExt, opts ...grpc.CallOption) (*CmdGetManyByNameExtResponse, error)
	GetObjectManyByNameExtStream(ctx context.Context, in *CmdGetManyByNameExt, opts ...grpc.CallOption) (ObjService_GetObjectManyByNameExtStreamClient, error)
	ChangeInitData(ctx context.Context, in *CmdChangeInitData, opts ...grpc.CallOption) (*CmdChangeInitDataResponse, error)
	ChangeInitDataExt(ctx context.Context, in *CmdChangeInitDataExt, opts ...grpc.CallOption) (*CmdChangeInitDataExtResponse, error)
}

type objServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjServiceClient(cc grpc.ClientConnInterface) ObjServiceClient {
	return &objServiceClient{cc}
}

func (c *objServiceClient) Connect(ctx context.Context, in *CmdConnect, opts ...grpc.CallOption) (*CmdConnectResponse, error) {
	out := new(CmdConnectResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objServiceClient) ConnectExt(ctx context.Context, in *CmdConnectExt, opts ...grpc.CallOption) (*CmdConnectExtResponse, error) {
	out := new(CmdConnectExtResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/connect_ext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objServiceClient) LookupByName(ctx context.Context, in *CmdLookupByName, opts ...grpc.CallOption) (*CmdLookupByNameResponse, error) {
	out := new(CmdLookupByNameResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/lookup_by_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objServiceClient) LookupByNameStream(ctx context.Context, in *CmdLookupByName, opts ...grpc.CallOption) (ObjService_LookupByNameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ObjService_serviceDesc.Streams[0], "/org.anonymous.grpc.ObjService/lookup_by_name_stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objServiceLookupByNameStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjService_LookupByNameStreamClient interface {
	Recv() (*CmdLookupByNameResponseStream, error)
	grpc.ClientStream
}

type objServiceLookupByNameStreamClient struct {
	grpc.ClientStream
}

func (x *objServiceLookupByNameStreamClient) Recv() (*CmdLookupByNameResponseStream, error) {
	m := new(CmdLookupByNameResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objServiceClient) LookupByType(ctx context.Context, in *CmdNameLookupByType, opts ...grpc.CallOption) (*CmdNameLookupByTypeResponse, error) {
	out := new(CmdNameLookupByTypeResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/lookup_by_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objServiceClient) LookupByTypeStream(ctx context.Context, in *CmdNameLookupByType, opts ...grpc.CallOption) (ObjService_LookupByTypeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ObjService_serviceDesc.Streams[1], "/org.anonymous.grpc.ObjService/lookup_by_type_stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objServiceLookupByTypeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjService_LookupByTypeStreamClient interface {
	Recv() (*CmdNameLookupByTypeResponseStream, error)
	grpc.ClientStream
}

type objServiceLookupByTypeStreamClient struct {
	grpc.ClientStream
}

func (x *objServiceLookupByTypeStreamClient) Recv() (*CmdNameLookupByTypeResponseStream, error) {
	m := new(CmdNameLookupByTypeResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objServiceClient) GetObject(ctx context.Context, in *CmdGetByName, opts ...grpc.CallOption) (*CmdGetByNameResponse, error) {
	out := new(CmdGetByNameResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/get_object", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objServiceClient) GetObjectExt(ctx context.Context, in *CmdGetByNameExt, opts ...grpc.CallOption) (*CmdGetByNameExtResponse, error) {
	out := new(CmdGetByNameExtResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/get_object_ext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objServiceClient) GetObjectManyByName(ctx context.Context, in *CmdGetManyByName, opts ...grpc.CallOption) (*CmdGetManyByNameResponse, error) {
	out := new(CmdGetManyByNameResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/get_object_many_by_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objServiceClient) GetObjectManyByNameStream(ctx context.Context, in *CmdGetManyByName, opts ...grpc.CallOption) (ObjService_GetObjectManyByNameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ObjService_serviceDesc.Streams[2], "/org.anonymous.grpc.ObjService/get_object_many_by_name_stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objServiceGetObjectManyByNameStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjService_GetObjectManyByNameStreamClient interface {
	Recv() (*CmdGetManyByNameResponseStream, error)
	grpc.ClientStream
}

type objServiceGetObjectManyByNameStreamClient struct {
	grpc.ClientStream
}

func (x *objServiceGetObjectManyByNameStreamClient) Recv() (*CmdGetManyByNameResponseStream, error) {
	m := new(CmdGetManyByNameResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objServiceClient) GetObjectManyByNameExt(ctx context.Context, in *CmdGetManyByNameExt, opts ...grpc.CallOption) (*CmdGetManyByNameExtResponse, error) {
	out := new(CmdGetManyByNameExtResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/get_object_many_by_name_ext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objServiceClient) GetObjectManyByNameExtStream(ctx context.Context, in *CmdGetManyByNameExt, opts ...grpc.CallOption) (ObjService_GetObjectManyByNameExtStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ObjService_serviceDesc.Streams[3], "/org.anonymous.grpc.ObjService/get_object_many_by_name_ext_stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objServiceGetObjectManyByNameExtStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjService_GetObjectManyByNameExtStreamClient interface {
	Recv() (*CmdGetManyByNameExtResponseStream, error)
	grpc.ClientStream
}

type objServiceGetObjectManyByNameExtStreamClient struct {
	grpc.ClientStream
}

func (x *objServiceGetObjectManyByNameExtStreamClient) Recv() (*CmdGetManyByNameExtResponseStream, error) {
	m := new(CmdGetManyByNameExtResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objServiceClient) ChangeInitData(ctx context.Context, in *CmdChangeInitData, opts ...grpc.CallOption) (*CmdChangeInitDataResponse, error) {
	out := new(CmdChangeInitDataResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/change_init_data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objServiceClient) ChangeInitDataExt(ctx context.Context, in *CmdChangeInitDataExt, opts ...grpc.CallOption) (*CmdChangeInitDataExtResponse, error) {
	out := new(CmdChangeInitDataExtResponse)
	err := c.cc.Invoke(ctx, "/org.anonymous.grpc.ObjService/change_init_data_ext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjServiceServer is the server API for ObjService service.
// All implementations must embed UnimplementedObjServiceServer
// for forward compatibility
type ObjServiceServer interface {
	Connect(context.Context, *CmdConnect) (*CmdConnectResponse, error)
	ConnectExt(context.Context, *CmdConnectExt) (*CmdConnectExtResponse, error)
	LookupByName(context.Context, *CmdLookupByName) (*CmdLookupByNameResponse, error)
	LookupByNameStream(*CmdLookupByName, ObjService_LookupByNameStreamServer) error
	LookupByType(context.Context, *CmdNameLookupByType) (*CmdNameLookupByTypeResponse, error)
	LookupByTypeStream(*CmdNameLookupByType, ObjService_LookupByTypeStreamServer) error
	GetObject(context.Context, *CmdGetByName) (*CmdGetByNameResponse, error)
	GetObjectExt(context.Context, *CmdGetByNameExt) (*CmdGetByNameExtResponse, error)
	GetObjectManyByName(context.Context, *CmdGetManyByName) (*CmdGetManyByNameResponse, error)
	GetObjectManyByNameStream(*CmdGetManyByName, ObjService_GetObjectManyByNameStreamServer) error
	GetObjectManyByNameExt(context.Context, *CmdGetManyByNameExt) (*CmdGetManyByNameExtResponse, error)
	GetObjectManyByNameExtStream(*CmdGetManyByNameExt, ObjService_GetObjectManyByNameExtStreamServer) error
	ChangeInitData(context.Context, *CmdChangeInitData) (*CmdChangeInitDataResponse, error)
	ChangeInitDataExt(context.Context, *CmdChangeInitDataExt) (*CmdChangeInitDataExtResponse, error)
	mustEmbedUnimplementedObjServiceServer()
}

// UnimplementedObjServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObjServiceServer struct {
}

func (UnimplementedObjServiceServer) Connect(context.Context, *CmdConnect) (*CmdConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedObjServiceServer) ConnectExt(context.Context, *CmdConnectExt) (*CmdConnectExtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectExt not implemented")
}
func (UnimplementedObjServiceServer) LookupByName(context.Context, *CmdLookupByName) (*CmdLookupByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupByName not implemented")
}
func (UnimplementedObjServiceServer) LookupByNameStream(*CmdLookupByName, ObjService_LookupByNameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LookupByNameStream not implemented")
}
func (UnimplementedObjServiceServer) LookupByType(context.Context, *CmdNameLookupByType) (*CmdNameLookupByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupByType not implemented")
}
func (UnimplementedObjServiceServer) LookupByTypeStream(*CmdNameLookupByType, ObjService_LookupByTypeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LookupByTypeStream not implemented")
}
func (UnimplementedObjServiceServer) GetObject(context.Context, *CmdGetByName) (*CmdGetByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedObjServiceServer) GetObjectExt(context.Context, *CmdGetByNameExt) (*CmdGetByNameExtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectExt not implemented")
}
func (UnimplementedObjServiceServer) GetObjectManyByName(context.Context, *CmdGetManyByName) (*CmdGetManyByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectManyByName not implemented")
}
func (UnimplementedObjServiceServer) GetObjectManyByNameStream(*CmdGetManyByName, ObjService_GetObjectManyByNameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObjectManyByNameStream not implemented")
}
func (UnimplementedObjServiceServer) GetObjectManyByNameExt(context.Context, *CmdGetManyByNameExt) (*CmdGetManyByNameExtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectManyByNameExt not implemented")
}
func (UnimplementedObjServiceServer) GetObjectManyByNameExtStream(*CmdGetManyByNameExt, ObjService_GetObjectManyByNameExtStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObjectManyByNameExtStream not implemented")
}
func (UnimplementedObjServiceServer) ChangeInitData(context.Context, *CmdChangeInitData) (*CmdChangeInitDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInitData not implemented")
}
func (UnimplementedObjServiceServer) ChangeInitDataExt(context.Context, *CmdChangeInitDataExt) (*CmdChangeInitDataExtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInitDataExt not implemented")
}
func (UnimplementedObjServiceServer) mustEmbedUnimplementedObjServiceServer() {}

// UnsafeObjServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjServiceServer will
// result in compilation errors.
type UnsafeObjServiceServer interface {
	mustEmbedUnimplementedObjServiceServer()
}

func RegisterObjServiceServer(s *grpc.Server, srv ObjServiceServer) {
	s.RegisterService(&_ObjService_serviceDesc, srv)
}

func _ObjService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).Connect(ctx, req.(*CmdConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjService_ConnectExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdConnectExt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).ConnectExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/ConnectExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).ConnectExt(ctx, req.(*CmdConnectExt))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjService_LookupByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdLookupByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).LookupByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/LookupByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).LookupByName(ctx, req.(*CmdLookupByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjService_LookupByNameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CmdLookupByName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjServiceServer).LookupByNameStream(m, &objServiceLookupByNameStreamServer{stream})
}

type ObjService_LookupByNameStreamServer interface {
	Send(*CmdLookupByNameResponseStream) error
	grpc.ServerStream
}

type objServiceLookupByNameStreamServer struct {
	grpc.ServerStream
}

func (x *objServiceLookupByNameStreamServer) Send(m *CmdLookupByNameResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjService_LookupByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdNameLookupByType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).LookupByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/LookupByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).LookupByType(ctx, req.(*CmdNameLookupByType))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjService_LookupByTypeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CmdNameLookupByType)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjServiceServer).LookupByTypeStream(m, &objServiceLookupByTypeStreamServer{stream})
}

type ObjService_LookupByTypeStreamServer interface {
	Send(*CmdNameLookupByTypeResponseStream) error
	grpc.ServerStream
}

type objServiceLookupByTypeStreamServer struct {
	grpc.ServerStream
}

func (x *objServiceLookupByTypeStreamServer) Send(m *CmdNameLookupByTypeResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdGetByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).GetObject(ctx, req.(*CmdGetByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjService_GetObjectExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdGetByNameExt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).GetObjectExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/GetObjectExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).GetObjectExt(ctx, req.(*CmdGetByNameExt))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjService_GetObjectManyByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdGetManyByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).GetObjectManyByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/GetObjectManyByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).GetObjectManyByName(ctx, req.(*CmdGetManyByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjService_GetObjectManyByNameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CmdGetManyByName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjServiceServer).GetObjectManyByNameStream(m, &objServiceGetObjectManyByNameStreamServer{stream})
}

type ObjService_GetObjectManyByNameStreamServer interface {
	Send(*CmdGetManyByNameResponseStream) error
	grpc.ServerStream
}

type objServiceGetObjectManyByNameStreamServer struct {
	grpc.ServerStream
}

func (x *objServiceGetObjectManyByNameStreamServer) Send(m *CmdGetManyByNameResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjService_GetObjectManyByNameExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdGetManyByNameExt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).GetObjectManyByNameExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/GetObjectManyByNameExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).GetObjectManyByNameExt(ctx, req.(*CmdGetManyByNameExt))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjService_GetObjectManyByNameExtStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CmdGetManyByNameExt)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjServiceServer).GetObjectManyByNameExtStream(m, &objServiceGetObjectManyByNameExtStreamServer{stream})
}

type ObjService_GetObjectManyByNameExtStreamServer interface {
	Send(*CmdGetManyByNameExtResponseStream) error
	grpc.ServerStream
}

type objServiceGetObjectManyByNameExtStreamServer struct {
	grpc.ServerStream
}

func (x *objServiceGetObjectManyByNameExtStreamServer) Send(m *CmdGetManyByNameExtResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjService_ChangeInitData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdChangeInitData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).ChangeInitData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/ChangeInitData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).ChangeInitData(ctx, req.(*CmdChangeInitData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjService_ChangeInitDataExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdChangeInitDataExt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjServiceServer).ChangeInitDataExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.anonymous.grpc.ObjService/ChangeInitDataExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjServiceServer).ChangeInitDataExt(ctx, req.(*CmdChangeInitDataExt))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.anonymous.grpc.ObjService",
	HandlerType: (*ObjServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "connect",
			Handler:    _ObjService_Connect_Handler,
		},
		{
			MethodName: "connect_ext",
			Handler:    _ObjService_ConnectExt_Handler,
		},
		{
			MethodName: "lookup_by_name",
			Handler:    _ObjService_LookupByName_Handler,
		},
		{
			MethodName: "lookup_by_type",
			Handler:    _ObjService_LookupByType_Handler,
		},
		{
			MethodName: "get_object",
			Handler:    _ObjService_GetObject_Handler,
		},
		{
			MethodName: "get_object_ext",
			Handler:    _ObjService_GetObjectExt_Handler,
		},
		{
			MethodName: "get_object_many_by_name",
			Handler:    _ObjService_GetObjectManyByName_Handler,
		},
		{
			MethodName: "get_object_many_by_name_ext",
			Handler:    _ObjService_GetObjectManyByNameExt_Handler,
		},
		{
			MethodName: "change_init_data",
			Handler:    _ObjService_ChangeInitData_Handler,
		},
		{
			MethodName: "change_init_data_ext",
			Handler:    _ObjService_ChangeInitDataExt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "lookup_by_name_stream",
			Handler:       _ObjService_LookupByNameStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "lookup_by_type_stream",
			Handler:       _ObjService_LookupByTypeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "get_object_many_by_name_stream",
			Handler:       _ObjService_GetObjectManyByNameStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "get_object_many_by_name_ext_stream",
			Handler:       _ObjService_GetObjectManyByNameExtStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "obj_svc.proto",
}
